var BHC=function(){"use strict";function g(l){const e=l.getFullYear(),t=String(l.getMonth()+1).padStart(2,"0"),a=String(l.getDate()).padStart(2,"0");return`${e}-${t}-${a}`}function M(l){const[e,t,a]=l.split("-").map(Number);return new Date(e,t-1,a)}function b(l,e){const t=new Date(l);return t.setDate(t.getDate()+e),t}function D(l,e){const t=e.getTime()-l.getTime();return Math.ceil(t/864e5)}function f(l,e){return l.getFullYear()===e.getFullYear()&&l.getMonth()===e.getMonth()&&l.getDate()===e.getDate()}function A(l){return new Date(l.getFullYear(),l.getMonth(),1)}function E(l){return new Date(l.getFullYear(),l.getMonth()+1,0)}function S(l){const e=A(l),t=E(l),a=[],i=new Date(e);for(;i<=t;)a.push(new Date(i)),i.setDate(i.getDate()+1);return a}function $(l,e,t){return!e||!t?!1:l>=e&&l<t}const w={"cs-CZ":{months:["Leden","Únor","Březen","Duben","Květen","Červen","Červenec","Srpen","Září","Říjen","Listopad","Prosinec"],days:["Po","Út","St","Čt","Pá","So","Ne"],selectDates:"Vyberte datum příjezdu a odjezdu",clear:"Vymazat",refreshData:"Aktualizovat data",loading:"Načítám...",noAvailability:"Žádná dostupnost",selectCheckIn:"Vyberte datum příjezdu",selectCheckOut:"Vyberte datum odjezdu",invalidRange:"Neplatný rozsah dat",noArrivalDay:"V tento den není možný příjezd",minStayRequired:"Minimální pobyt: {nights} nocí",nights:"nocí",night:"noc",nights2to4:"noci",pricePerNight:"za noc",totalPrice:"Celková cena",priceCalculation:"Výpočet ceny",priceFromApi:"Cena z API",priceFallback:"Cena z fallback",bookNow:"Rezervovat",bookingButton:"Rezervovat za {price} {currency}",errorLoadingAvailability:"Chyba při načítání dostupnosti",errorInvalidDates:"Neplatná data",errorNoAvailability:"Žádná dostupnost pro vybrané období",errorUnavailableInRange:"Vybrané období obsahuje nedostupné dny",ariaCalendar:"Kalendář dostupnosti",ariaPreviousMonth:"Předchozí měsíc",ariaNextMonth:"Následující měsíc",ariaSelectDate:"Vybrat datum {date}",ariaSelectedStart:"Datum příjezdu: {date}",ariaSelectedEnd:"Datum odjezdu: {date}",ariaInRange:"V rozsahu pobytu",ariaNotAvailable:"Nedostupné",ariaNoArrival:"Není možný příjezd",ariaPastDay:"Minulý den",ariaCheckoutAvailable:"Možný odjezd",ariaCheckoutOnly:"Dostupné pouze pro odjezd",ariaCanSelectAsCheckIn:"Může být vybrán jako příjezd",ariaLoading:"Načítám dostupnost",tooltipAvailable:"Dostupné",tooltipNotAvailable:"Nedostupné",tooltipNoArrival:"Není možný příjezd (•)",tooltipCanSelectAsCheckIn:"Klikněte pro výběr jako příjezd",tooltipDisabled:"Nedostupné pro aktuální výběr",tooltipOutOfRange:"Mimo rozsah pro aktuální výběr",tooltipSelected:"Vybrané",tooltipInRange:"V rozsahu pobytu",placeholderSelectDates:"Vyberte datum příjezdu a odjezdu",selectCheckOutPrompt:"Vyberte datum odjezdu",invalidSelectionMessage:"Vybraný termín není dostupný",selectionSummary:"{nights} nocí, {startDate} – {endDate}"},"en-US":{months:["January","February","March","April","May","June","July","August","September","October","November","December"],days:["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],selectDates:"Select check-in and check-out dates",clear:"Clear",refreshData:"Refresh Data",loading:"Loading...",noAvailability:"No availability",selectCheckIn:"Select check-in date",selectCheckOut:"Select check-out date",invalidRange:"Invalid date range",noArrivalDay:"No arrival possible on this day",minStayRequired:"Minimum stay: {nights} nights",nights:"nights",night:"night",nights2to4:"nights",pricePerNight:"per night",totalPrice:"Total price",priceCalculation:"Price calculation",priceFromApi:"Price from API",priceFallback:"Fallback price",bookNow:"Book Now",bookingButton:"Book for {price} {currency}",errorLoadingAvailability:"Error loading availability",errorInvalidDates:"Invalid dates",errorNoAvailability:"No availability for selected period",errorUnavailableInRange:"Selected period contains unavailable days",ariaCalendar:"Availability calendar",ariaPreviousMonth:"Previous month",ariaNextMonth:"Next month",ariaSelectDate:"Select date {date}",ariaSelectedStart:"Check-in date: {date}",ariaSelectedEnd:"Check-out date: {date}",ariaInRange:"In stay range",ariaNotAvailable:"Not available",ariaNoArrival:"No arrival possible",ariaPastDay:"Past day",ariaCheckoutAvailable:"Checkout available",ariaCheckoutOnly:"Available for checkout only",ariaCanSelectAsCheckIn:"Can be selected as check-in",ariaLoading:"Loading availability",tooltipAvailable:"Available",tooltipNotAvailable:"Not available",tooltipNoArrival:"No arrival possible (•)",tooltipCanSelectAsCheckIn:"Click to select as check-in",tooltipDisabled:"Not available for current selection",tooltipOutOfRange:"Out of range for current selection",tooltipSelected:"Selected",tooltipInRange:"In stay range",placeholderSelectDates:"Select check-in and check-out dates",selectCheckOutPrompt:"Select check-out date",invalidSelectionMessage:"Selected term is not available",selectionSummary:"{nights} nights, {startDate} – {endDate}"}};function s(l,e,t={}){let i=(w[l]||w["cs-CZ"])[e]||e;return Object.keys(t).forEach(n=>{i=i.replace(`{${n}}`,t[n])}),i}function v(l,e){return new Intl.DateTimeFormat(e,{year:"numeric",month:"long",day:"numeric"}).format(l)}class N{constructor(e){this.config=e,this.cache=new Map,this.cacheTtlMs=e.cacheTtlMs||864e5,this.globalAvailabilityCache=new Map,this.storageKey=`bhc-cache-${e.clientId}`,this.loadCacheFromStorage()}async loadAvailability(e,t,a=!1){const i=`availability_${g(e)}_${g(t)}`,n=this.getFromCache(i);if(n&&!a)return new Map(n);try{const r=this.buildAvailabilityUrl(e,t),h=await fetch(r);if(!h.ok)throw new Error(`HTTP ${h.status}: ${h.statusText}`);const d=await h.json(),o=this.parseAvailabilityData(d);return this.setCache(i,Array.from(o.entries())),o}catch(r){throw console.error("❌ API Error:",r),r}}buildAvailabilityUrl(e,t){const a=new URLSearchParams({clientId:this.config.clientId,from:g(e),to:g(t),persons:this.config.persons});return this.config.unitId&&a.append("unitId",this.config.unitId),`${this.config.apiBase}${this.config.endpoints.availability}?${a}`}parseAvailabilityData(e){const t=new Map;return Array.isArray(e)&&e.forEach(a=>{if(a.date){const i={available:!!a.availability,closeToArrival:!!a.close_to_arrival,price:Number(a.price)||0,minStay:Number(a.min_stay)||1};t.set(a.date,i)}}),t}getFromCache(e){const t=this.cache.get(e);return t?Date.now()-t.timestamp>this.cacheTtlMs?(this.cache.delete(e),null):t.value:null}setCache(e,t){const a=Date.now();this.cache.set(e,{value:t,timestamp:a}),this.saveCacheToStorage()}clearCache(){this.cache.clear(),this.globalAvailabilityCache.clear(),localStorage.removeItem(this.storageKey)}async forceRefreshAvailability(e,t){return this.loadAvailability(e,t,!0)}getCacheStats(){return{size:this.cache.size,ttlMs:this.cacheTtlMs,keys:Array.from(this.cache.keys())}}logCacheContents(){}loadCacheFromStorage(){try{const e=localStorage.getItem(this.storageKey);if(e){const t=JSON.parse(e),a=Date.now();t.timestamp&&a-t.timestamp<this.cacheTtlMs?this.cache=new Map(t.cache):localStorage.removeItem(this.storageKey)}}catch(e){console.warn("⚠️ Failed to load cache from localStorage:",e)}}saveCacheToStorage(){try{const e={timestamp:Date.now(),cache:Array.from(this.cache.entries())};localStorage.setItem(this.storageKey,JSON.stringify(e))}catch(e){console.warn("⚠️ Failed to save cache to localStorage:",e)}}}class P{constructor(e){this.config=e,this.element=null}init(e){this.container=e}render(e){return this.element=document.createElement("div"),this.element.className="bhc-widget",this.element.setAttribute("role","application"),this.element.setAttribute("aria-label",s(this.config.locale,"ariaCalendar")),this.element.innerHTML=this.getWidgetHTML(e),this.container.appendChild(this.element),this.element}getWidgetHTML(e){return`
      <div class="bhc-header">
        <h3 class="bhc-title">${s(this.config.locale,"selectDates")}</h3>
        <div class="bhc-controls">
          <button class="bhc-btn bhc-btn-clear">
            ${s(this.config.locale,"clear")}
          </button>
          <button class="bhc-btn bhc-btn-refresh">
            ${s(this.config.locale,"refreshData")}
          </button>
        </div>
      </div>
      
      <div class="bhc-calendar-container">
        <div class="bhc-calendar-header">
          <button class="bhc-btn bhc-btn-nav" data-action="prev" aria-label="${s(this.config.locale,"ariaPreviousMonth")}">
            ‹
          </button>
          <h4 class="bhc-month-year"></h4>
          <button class="bhc-btn bhc-btn-nav" data-action="next" aria-label="${s(this.config.locale,"ariaNextMonth")}">
            ›
          </button>
        </div>
        
        <div class="bhc-calendar-grid">
          <div class="bhc-weekdays"></div>
          <div class="bhc-days"></div>
        </div>
      </div>
      
      <div class="bhc-info">
        <div class="bhc-selection"></div>
        <div class="bhc-price-calculation"></div>
        <div class="bhc-error"></div>
        <div class="bhc-legend">
          <div class="bhc-legend-item">
            <span class="bhc-legend-dot bhc-dot-no-arrival">•</span>
            ${s(this.config.locale,"tooltipNoArrival")}
          </div>
        </div>
      </div>
      
      <div class="bhc-loading" style="display: none;">
        ${s(this.config.locale,"loading")}
      </div>
    `}updateCalendar(e){this.updateMonthYear(e),this.updateDays(e),this.updateSelection(e),this.updatePriceCalculation(e)}updateMonthYear(e){const t=this.element.querySelector(".bhc-month-year"),a=e.currentMonth,i=new Date(a.getFullYear(),a.getMonth()+1,1),n=s(this.config.locale,"months")[a.getMonth()],r=s(this.config.locale,"months")[i.getMonth()];t.innerHTML=`
      <div class="bhc-month-pair">
        <div class="bhc-month-item">
          <span class="bhc-month-name">${n} ${a.getFullYear()}</span>
        </div>
        <div class="bhc-month-item">
          <span class="bhc-month-name">${r} ${i.getFullYear()}</span>
        </div>
      </div>
    `}updateDays(e){const t=this.element.querySelector(".bhc-days"),a=e.currentMonth,i=new Date(a.getFullYear(),a.getMonth()+1,1),n=S(a),r=S(i),h=this.renderMonthDays(n,a,e),d=this.renderMonthDays(r,i,e);t.innerHTML=`
      <div class="bhc-month-grid">
        <div class="bhc-month-calendar">
          ${h}
        </div>
        <div class="bhc-month-calendar">
          ${d}
        </div>
      </div>
    `}renderMonthDays(e,t,a){const n=s(this.config.locale,"days").map(c=>`<div class="bhc-weekday">${c}</div>`).join(""),h=new Date(t.getFullYear(),t.getMonth(),1).getDay(),d=h===0?6:h-1;let o="";for(let c=0;c<d;c++)o+='<div class="bhc-day-empty"></div>';return o+=e.map(c=>this.renderSingleDay(c,t,a)).join(""),`
      <div class="bhc-weekdays">${n}</div>
      <div class="bhc-days">${o}</div>
    `}renderSingleDay(e,t,a){const i=g(e),n=a.availability.get(i),r=e.getMonth()===t.getMonth(),h=f(e,new Date),d=e<new Date&&!h;let o=["bhc-day"],c=s(this.config.locale,"ariaSelectDate",{date:v(e,this.config.locale)});r||o.push("bhc-day-other-month"),h&&o.push("bhc-day-today");let u=!1,m=!1,p=!1,y=!1;if(r&&!d)if(!a.startDate)u=n&&n.available&&!n.closeToArrival,m=!u;else if(a.startDate&&!a.endDate){const k=this.getMaxEndDate(a.startDate,a.availability);u=e<=k,p=e>k,p&&n&&n.available&&!n.closeToArrival&&(y=!0)}else u=!0;else m=!0;return d?(o.push("bhc-day-past"),c+=` - ${s(this.config.locale,"ariaPastDay")}`):n?p&&y?o.push("bhc-day-out-of-range-checkin"):p?o.push("bhc-day-out-of-range"):m?o.push("bhc-day-disabled"):n.available?n.closeToArrival?a.startDate&&!a.endDate?(o.push("bhc-day-checkout-only"),c+=` - ${s(this.config.locale,"ariaCheckoutOnly")}`):(o.push("bhc-day-no-arrival"),c+=` - ${s(this.config.locale,"ariaNoArrival")}`):o.push("bhc-day-available"):(o.push("bhc-day-unavailable"),c+=` - ${s(this.config.locale,"ariaNotAvailable")}`):o.push("bhc-day-loading"),a.startDate&&f(e,a.startDate)?(o.push("bhc-day-selected-start"),c=s(this.config.locale,"ariaSelectedStart",{date:v(e,this.config.locale)})):a.endDate&&f(e,a.endDate)?(o.push("bhc-day-selected-end"),c=s(this.config.locale,"ariaSelectedEnd",{date:v(e,this.config.locale)})):a.startDate&&a.endDate&&$(e,a.startDate,a.endDate)&&(o.push("bhc-day-in-range"),c+=` - ${s(this.config.locale,"ariaInRange")}`),y&&(c+=` - ${s(this.config.locale,"ariaCanSelectAsCheckIn")}`),`
      <div 
        class="${o.join(" ")}"
        data-date="${i}"
        data-clickable="${u}"
        data-can-select-checkin="${y}"
        data-out-of-range="${p}"
        tabindex="${u?"0":"-1"}"
        role="button"
        aria-label="${c}"
        ${u?n&&n.closeToArrival&&a.startDate&&!a.endDate?`title="${s(this.config.locale,"ariaCheckoutOnly")}"`:`title="${s(this.config.locale,"tooltipAvailable")}"`:y?`title="${s(this.config.locale,"tooltipCanSelectAsCheckIn")}"`:p?`title="${s(this.config.locale,"tooltipOutOfRange")}"`:n?n.closeToArrival?`title="${s(this.config.locale,"tooltipNoArrival")}"`:d?`title="${s(this.config.locale,"ariaPastDay")}"`:`title="${s(this.config.locale,"tooltipDisabled")}"`:`title="${s(this.config.locale,"tooltipNotAvailable")}"`}
      >
        <span class="bhc-day-number">${e.getDate()}</span>
        ${n&&n.closeToArrival?'<span class="bhc-dot-no-arrival">•</span>':""}
      </div>
    `}updateSelection(e){const t=this.element.querySelector(".bhc-selection");if(e.startDate&&e.endDate){const a=this.calculateNights(e.startDate,e.endDate),i=a===1?s(this.config.locale,"night"):a<5?s(this.config.locale,"nights2to4"):s(this.config.locale,"nights"),n=s(this.config.locale,"selectionSummary",{nights:a,startDate:v(e.startDate,this.config.locale),endDate:v(e.endDate,this.config.locale)});t.innerHTML=`
        <div class="bhc-selection-item">
          <strong>${s(this.config.locale,"selectCheckIn")}:</strong>
          ${v(e.startDate,this.config.locale)}
        </div>
        <div class="bhc-selection-item">
          <strong>${s(this.config.locale,"selectCheckOut")}:</strong>
          ${v(e.endDate,this.config.locale)}
        </div>
        <div class="bhc-selection-item">
          <strong>${a} ${i}</strong>
        </div>
        <div class="bhc-selection-summary">
          ${n}
        </div>
      `}else e.startDate?t.innerHTML=`
        <div class="bhc-selection-item">
          <strong>${s(this.config.locale,"selectCheckIn")}:</strong>
          ${v(e.startDate,this.config.locale)}
        </div>
        <div class="bhc-selection-item">
          <em>${s(this.config.locale,"selectCheckOutPrompt")}</em>
        </div>
      `:t.innerHTML=`
        <div class="bhc-selection-item">
          <em>${s(this.config.locale,"placeholderSelectDates")}</em>
        </div>
      `}updatePriceCalculation(e){const t=this.element.querySelector(".bhc-price-calculation");if(e.startDate&&e.endDate&&e.nights>0){const a=e.nights,i=a===1?s(this.config.locale,"night"):a<5?s(this.config.locale,"nights2to4"):s(this.config.locale,"nights");let n="";e.pricingStrategy==="api"&&e.priceBreakdown&&e.priceBreakdown.length>0?n=this.renderApiPriceBreakdown(e,i):n=this.renderFixedPriceBreakdown(e,i),t.innerHTML=`
        <div class="bhc-price-calculation-content">
          <div class="bhc-price-breakdown">
            ${n}
          </div>
          <div class="bhc-booking-section">
            <a href="${this.buildBookingUrl(e)}" class="bhc-btn bhc-btn-booking" target="_blank">
              ${s(this.config.locale,"bookingButton",{price:e.totalPrice.toLocaleString(),currency:this.config.currency})}
            </a>
            ${e.pricingStrategy==="api"&&e.hasApiPrices?`<div class="bhc-price-source">${s(this.config.locale,"priceFromApi")}</div>`:e.pricingStrategy==="fallback"?`<div class="bhc-price-source">${s(this.config.locale,"priceFallback")}</div>`:""}
          </div>
        </div>
      `,t.style.display="block"}else t.style.display="none"}renderApiPriceBreakdown(e,t){const a=e.priceBreakdown||[];let i="";return this.groupConsecutivePrices(a).forEach(r=>{r.nights===1?i+=`
          <div class="bhc-price-item">
            <span class="bhc-price-label">${this.formatDateLocale(r.startDate,this.config.locale)}</span>
            <span class="bhc-price-value">${r.price.toLocaleString()} ${this.config.currency}</span>
          </div>
        `:i+=`
          <div class="bhc-price-item">
            <span class="bhc-price-label">${r.nights} ${t} × ${r.price.toLocaleString()} ${this.config.currency}</span>
            <span class="bhc-price-value">${r.total.toLocaleString()} ${this.config.currency}</span>
          </div>
        `}),i}renderFixedPriceBreakdown(e,t){const a=this.config.pricePerNight||1e3;return`
      <div class="bhc-price-item">
        <span class="bhc-price-label">${e.nights} ${t} × ${a.toLocaleString()} ${this.config.currency}</span>
        <span class="bhc-price-value">${e.totalPrice.toLocaleString()} ${this.config.currency}</span>
      </div>
    `}groupConsecutivePrices(e){if(!e||e.length===0)return[];const t=[];let a=null;return e.forEach(i=>{!a||a.price!==i.price||a.source!==i.source?(a={startDate:i.date,endDate:i.date,price:i.price,source:i.source,nights:1,total:i.price},t.push(a)):(a.endDate=i.date,a.nights++,a.total+=i.price)}),t}setLoading(e){const t=this.element.querySelector(".bhc-loading");t.style.display=e?"block":"none"}showError(e){const t=this.element.querySelector(".bhc-error");t.textContent=e,t.style.display="block",this.element.classList.add("bhc-error-state"),setTimeout(()=>{this.clearError()},5e3)}clearError(){const e=this.element.querySelector(".bhc-error");e.style.display="none",this.element.classList.remove("bhc-error-state")}calculateNights(e,t){const a=t.getTime()-e.getTime();return Math.ceil(a/864e5)}getMaxEndDate(e,t){const a=b(e,this.config.maxNights),i=new Date(e);for(;i<a;){i.setDate(i.getDate()+1);const n=g(i),r=t.get(n);if(r&&!r.available){i.setDate(i.getDate()-1);break}}return i}validateSelection(e){if(!e.startDate||!e.endDate)return!0;const t=this.calculateNights(e.startDate,e.endDate);return!(t<this.config.minNights||t>this.config.maxNights)}buildBookingUrl(e){if(!e.startDate||!e.endDate)return"#";const t=this.formatDateForUrl(e.startDate),a=this.formatDateForUrl(e.endDate),i=this.config.bookingUrl||"https://booking.example.com",n=new URLSearchParams({checkin:t,checkout:a,guests:this.config.persons||2,currency:this.config.currency||"CZK"});return this.config.unitId&&n.set("unit",this.config.unitId),`${i}?${n.toString()}`}formatDateForUrl(e){const t=e.getFullYear(),a=String(e.getMonth()+1).padStart(2,"0"),i=String(e.getDate()).padStart(2,"0");return`${t}-${a}-${i}`}getElement(){return this.element}destroy(){this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.element=null}}class L{constructor(e){this.config=e}validateSelection(e,t,a){if(!e||!t)return{isValid:!0,error:null};const i=D(e,t);if(i<this.config.minNights)return{isValid:!1,error:s(this.config.locale,"minStayRequired",{nights:this.config.minNights})};if(i>this.config.maxNights)return{isValid:!1,error:s(this.config.locale,"invalidRange")};const n=g(e),r=a.get(n);if(r&&r.closeToArrival)return{isValid:!1,error:s(this.config.locale,"noArrivalDay")};const h=this.validateAvailabilityInRange(e,t,a);return h.isValid?{isValid:!0,error:null}:h}validateAvailabilityInRange(e,t,a){const i=new Date(e);for(;i<t;){const n=g(i),r=a.get(n);if(r&&!r.available)return{isValid:!1,error:s(this.config.locale,"errorUnavailableInRange")};i.setDate(i.getDate()+1)}return{isValid:!0,error:null}}validateCheckInDate(e,t){const a=g(e),i=t.get(a);if(e<new Date&&!f(e,new Date))return{isValid:!1,error:s(this.config.locale,"ariaPastDay")};if(i){if(!i.available)return{isValid:!1,error:s(this.config.locale,"ariaNotAvailable")};if(i.closeToArrival)return{isValid:!1,error:s(this.config.locale,"ariaNoArrival")}}return{isValid:!0,error:null}}validateCheckOutDate(e,t,a){return e<=t?{isValid:!1,error:s(this.config.locale,"invalidRange")}:this.validateSelection(t,e,a)}isDateClickable(e,t,a){const i=g(e),n=a.availability.get(i),r=e.getMonth()===t.getMonth(),h=e<new Date&&!f(e,new Date);if(!r||h)return!1;if(a.startDate)if(a.startDate&&!a.endDate){const d=this.getMaxEndDate(a.startDate,a.availability);return e<=d?n&&n.available:this.canSelectAsCheckIn(e,a.availability).isValid}else return this.canSelectAsCheckIn(e,a.availability).isValid;else return n&&n.available&&!n.closeToArrival}getMaxEndDate(e,t){const a=b(e,this.config.maxNights),i=new Date(e);for(;i<a;){i.setDate(i.getDate()+1);const n=g(i),r=t.get(n);if(r&&!r.available){i.setDate(i.getDate()-1);break}}return i}canSelectAsCheckIn(e,t){const a=g(e),i=t.get(a);if(e<new Date&&!f(e,new Date))return{isValid:!1,error:s(this.config.locale,"ariaPastDay")};if(i){if(!i.available)return{isValid:!1,error:s(this.config.locale,"ariaNotAvailable")};if(i.closeToArrival)return{isValid:!1,error:s(this.config.locale,"ariaNoArrival")}}return{isValid:!0,error:null}}handleDateSwapping(e,t){return t<e?{needsSwap:!0,newStart:t,newEnd:e}:{needsSwap:!1,newStart:e,newEnd:t}}calculateNights(e,t){return D(e,t)}meetsMinimumNights(e,t){return this.calculateNights(e,t)>=this.config.minNights}meetsMaximumNights(e,t){return this.calculateNights(e,t)<=this.config.maxNights}getValidationSummary(e,t,a){if(!e||!t)return{isValid:!0,nights:0,errors:[],warnings:[]};const i=this.validateSelection(e,t,a),n=this.calculateNights(e,t);return{isValid:i.isValid,nights:n,errors:i.isValid?[]:[i.error],warnings:[]}}getBusinessRules(){return{minNights:this.config.minNights,maxNights:this.config.maxNights,allowPastDates:!1,allowSameDayCheckout:!1,turnOverRule:!0,closeToArrivalRule:!0}}updateConfig(e){this.config={...this.config,...e}}}class T{constructor(e={},t={}){this.config=t,this.state={startDate:null,endDate:null,currentMonth:new Date,availability:new Map,loading:!1,calculating:!1,error:null,hoverStartDate:null,hoverEndDate:null,nights:0,totalPrice:0,priceBreakdown:[],pricingStrategy:"fixed",hasApiPrices:!1,...e},this.listeners=new Map,this.history=[],this.maxHistorySize=10}getState(){return{...this.state}}get(e){return this.state[e]}set(e,t){const a=this.state[e];this.state[e]=t,this.saveToHistory(e,a,t),this.notifyListeners(e,t,a)}update(e){const t={};Object.keys(e).forEach(a=>{const i=this.state[a],n=e[a];i!==n&&(this.state[a]=n,t[a]={oldValue:i,newValue:n})}),this.saveToHistory("batch",null,t),Object.keys(t).forEach(a=>{this.notifyListeners(a,t[a].newValue,t[a].oldValue)})}setDateSelection(e,t){const a=this.calculateNights(e,t),i=this.state.availability,n=this.calculateTotalPrice(a,e,t,i);this.update({startDate:e,endDate:t,nights:a,totalPrice:n.totalPrice,priceBreakdown:n.priceBreakdown,pricingStrategy:n.pricingStrategy,hasApiPrices:n.hasApiPrices})}calculateNights(e,t){if(!e||!t)return 0;const a=t.getTime()-e.getTime();return Math.ceil(a/864e5)}calculateTotalPrice(e,t,a,i){return(this.config.pricingStrategy||"fixed")==="api"&&i&&t&&a?this.calculateApiPrice(e,t,a,i):this.calculateFixedPrice(e)}calculateApiPrice(e,t,a,i){const n=[];let r=0,h=!1;const d=new Date(t);for(;d<a;){const o=this.formatDate(d),c=i.get(o);if(c&&c.price>0)n.push({date:new Date(d),price:c.price,source:"api"}),r+=c.price,h=!0;else{const u=this.config.pricePerNight||1e3;n.push({date:new Date(d),price:u,source:"fallback"}),r+=u}d.setDate(d.getDate()+1)}return{totalPrice:r,priceBreakdown:n,pricingStrategy:h?"api":"fallback",hasApiPrices:h}}calculateFixedPrice(e){const t=this.config.pricePerNight||1e3;return{totalPrice:e*t,priceBreakdown:[{price:t,nights:e,source:"fixed"}],pricingStrategy:"fixed",hasApiPrices:!1}}formatDate(e){const t=e.getFullYear(),a=String(e.getMonth()+1).padStart(2,"0"),i=String(e.getDate()).padStart(2,"0");return`${t}-${a}-${i}`}setCurrentMonth(e){this.set("currentMonth",e)}setAvailability(e){this.set("availability",e)}setLoading(e){this.set("loading",e)}setCalculating(e){this.set("calculating",e)}setError(e){this.set("error",e)}setHoverDates(e,t){this.update({hoverStartDate:e,hoverEndDate:t})}clearSelection(){this.update({startDate:null,endDate:null,hoverStartDate:null,hoverEndDate:null,nights:0,totalPrice:0,priceBreakdown:[],pricingStrategy:"fixed",hasApiPrices:!1})}clearError(){this.set("error",null)}reset(){const e={startDate:null,endDate:null,currentMonth:new Date,availability:new Map,loading:!1,calculating:!1,error:null,hoverStartDate:null,hoverEndDate:null,nights:0,totalPrice:0,priceBreakdown:[],pricingStrategy:"fixed",hasApiPrices:!1};this.update(e)}subscribe(e,t){return this.listeners.has(e)||this.listeners.set(e,new Set),this.listeners.get(e).add(t),()=>{const a=this.listeners.get(e);a&&(a.delete(t),a.size===0&&this.listeners.delete(e))}}notifyListeners(e,t,a){const i=this.listeners.get(e);i&&i.forEach(r=>{try{r(t,a,e)}catch{}});const n=this.listeners.get("*");n&&n.forEach(r=>{try{r(this.state,{[e]:a},e)}catch{}})}saveToHistory(e,t,a){const i={timestamp:Date.now(),key:e,oldValue:t,newValue:a,state:{...this.state}};this.history.push(i),this.history.length>this.maxHistorySize&&this.history.shift()}getHistory(){return[...this.history]}undo(){if(this.history.length===0)return!1;const e=this.history.pop();return e.key==="batch"?Object.keys(e.newValue).forEach(t=>{this.state[t]=e.newValue[t].oldValue}):this.state[e.key]=e.oldValue,this.notifyListeners("undo",this.state,e.state),!0}getStats(){return{listenersCount:Array.from(this.listeners.values()).reduce((e,t)=>e+t.size,0),historySize:this.history.length,stateKeys:Object.keys(this.state),lastChange:this.history.length>0?this.history[this.history.length-1]:null}}createSnapshot(){return{timestamp:Date.now(),state:{...this.state},availability:new Map(this.state.availability)}}restoreSnapshot(e){e&&e.state&&(this.update(e.state),e.availability&&this.set("availability",new Map(e.availability)))}has(e){return e in this.state}keys(){return Object.keys(this.state)}values(){return Object.values(this.state)}entries(){return Object.entries(this.state)}destroy(){this.listeners.clear(),this.history=[],this.state={}}}class x{constructor(e,t){this.config=e,this.stateManager=t.stateManager,this.validator=t.validator,this.element=null,this.handleDayClick=null}init(e){this.element=e,this.attachEventListeners()}attachEventListeners(){this.element.querySelectorAll("[data-action]").forEach(t=>{t.addEventListener("click",a=>{const i=a.target.dataset.action;i==="prev"?this.handlePreviousMonth():i==="next"&&this.handleNextMonth()})}),this.element.querySelector(".bhc-btn-clear").addEventListener("click",()=>{this.handleClearSelection()});const e=this.element.querySelector(".bhc-btn-refresh");e&&e.addEventListener("click",()=>{this.handleRefreshData()}),this.element.addEventListener("keydown",t=>{this.handleKeyboard(t)}),this.attachDayClickHandlers()}attachDayClickHandlers(){this.handleDayClick&&this.element.removeEventListener("click",this.handleDayClick),this.handleDayClick=e=>{const t=e.target.closest(".bhc-day");if(t){const a=M(t.dataset.date);this.handleDateClick(a)}},this.element.addEventListener("click",this.handleDayClick)}handleDateClick(e){const t=g(e),a=this.stateManager.get("availability").get(t);e<new Date&&f(e,new Date);const i=!!this.stateManager.get("startDate"),n=!!this.stateManager.get("endDate");if(i)if(i&&!n){if(f(e,this.stateManager.get("startDate"))){this.stateManager.setDateSelection(e,null);return}const r=this.validator.getMaxEndDate(this.stateManager.get("startDate"),this.stateManager.get("availability"));if(e>r&&a&&a.available&&!a.closeToArrival){this.stateManager.setDateSelection(e,null);return}const d=this.validator.handleDateSwapping(this.stateManager.get("startDate"),e);let o=d.newStart,c=d.newEnd;d.needsSwap;const u=this.validator.validateSelection(o,c,this.stateManager.get("availability"));if(!u.isValid){this.stateManager.setError(u.error);return}this.stateManager.setDateSelection(o,c)}else this.stateManager.setDateSelection(e,null);else{const r=this.validator.validateCheckInDate(e,this.stateManager.get("availability"));if(!r.isValid){this.stateManager.setError(r.error);return}this.stateManager.setDateSelection(e,null)}this.stateManager.clearError()}handleKeyboard(e){const{key:t}=e,a=document.activeElement;if(a.classList.contains("bhc-day")){const i=M(a.dataset.date);let n=null;switch(t){case"ArrowLeft":n=b(i,-1);break;case"ArrowRight":n=b(i,1);break;case"ArrowUp":n=b(i,-7);break;case"ArrowDown":n=b(i,7);break;case"Enter":case" ":e.preventDefault(),this.handleDateClick(i);return}if(n){e.preventDefault();const r=this.element.querySelector(`[data-date="${g(n)}"]`);r&&r.focus()}}}handlePreviousMonth(){const e=this.stateManager.get("currentMonth"),t=new Date(e.getFullYear(),e.getMonth()-1,1);this.stateManager.setCurrentMonth(t),this.triggerEvent("monthChanged",{direction:"previous",newMonth:t,oldMonth:e})}handleNextMonth(){const e=this.stateManager.get("currentMonth"),t=new Date(e.getFullYear(),e.getMonth()+1,1);this.stateManager.setCurrentMonth(t),this.triggerEvent("monthChanged",{direction:"next",newMonth:t,oldMonth:e})}handleClearSelection(){this.stateManager.clearSelection(),this.triggerEvent("selectionCleared",{previousSelection:{startDate:this.stateManager.get("startDate"),endDate:this.stateManager.get("endDate")}})}handleRefreshData(){this.triggerEvent("refreshData",{timestamp:new Date().toISOString()})}handleHoverRange(e){if(!this.stateManager.get("startDate")||this.stateManager.get("endDate")||window.innerWidth<=768)return;const t=this.findHoverEndDate(e);this.stateManager.setHoverDates(this.stateManager.get("startDate"),t)}handleHoverRangeHide(){this.stateManager.setHoverDates(null,null)}findHoverEndDate(e){const t=this.stateManager.get("startDate"),a=this.validator.getMaxEndDate(t,this.stateManager.get("availability"));return e<=a?new Date(e):new Date(a)}triggerEvent(e,t){if(this.element){const a=new CustomEvent(`bhc-${e}`,{detail:t,bubbles:!0});this.element.dispatchEvent(a)}}addEventListener(e,t){this.element&&this.element.addEventListener(`bhc-${e}`,t)}removeEventListener(e,t){this.element&&this.element.removeEventListener(`bhc-${e}`,t)}isSameDay(e,t){return e.getFullYear()===t.getFullYear()&&e.getMonth()===t.getMonth()&&e.getDate()===t.getDate()}getEventStats(){return{hasElement:!!this.element,hasDayClickHandler:!!this.handleDayClick,listenersCount:this.element?this.element.addEventListener.toString().length:0}}destroy(){if(this.handleDayClick&&this.element&&this.element.removeEventListener("click",this.handleDayClick),this.element&&this.element.parentNode){const e=this.element.cloneNode(!0);this.element.parentNode.replaceChild(e,this.element)}this.element=null,this.handleDayClick=null}}class C{constructor(e){this.config=this.mergeConfig(e),this.stateManager=new T({},this.config),this.apiService=new N(this.config),this.renderer=new P(this.config),this.validator=new L(this.config),this.eventHandler=new x(this.config,{stateManager:this.stateManager,validator:this.validator}),this.container=null,this.element=null,this.setupStateListeners(),this.init()}setupStateListeners(){this.stateManager.subscribe("*",e=>{this.renderer&&this.renderer.getElement()&&(this.renderer.updateCalendar(e),this.eventHandler.attachDayClickHandlers())}),this.stateManager.subscribe("error",e=>{e?this.renderer.showError(e):this.renderer.clearError()}),this.stateManager.subscribe("loading",e=>{this.renderer.setLoading(e)}),this.stateManager.subscribe("calculating",e=>{this.renderer.setCalculating(e)}),this.setupEventHandlerListeners()}setupEventHandlerListeners(){this.eventHandler.addEventListener("monthChanged",e=>{this.loadAvailability()}),this.eventHandler.addEventListener("selectionCleared",e=>{})}mergeConfig(e){return{...{apiBase:"https://amazing-api.better-hotel.com/api/public",endpoints:{availability:"/availability",quote:"/price"},clientId:"1779",unitId:null,persons:2,currency:"CZK",locale:"cs-CZ",minNights:1,maxNights:30,cacheTtlMs:864e5,pricePerNight:1e3,pricingStrategy:"fixed",bookingUrl:"https://booking.example.com"},...e}}async init(){try{if(this.container=this.resolveContainer(),!this.container)throw new Error("Container element not found");this.render(),this.element.addEventListener("bhc-refreshData",e=>{this.handleRefreshData()}),await this.loadAvailability()}catch(e){this.handleError(e)}}resolveContainer(){return typeof this.config.container=="string"?document.querySelector(this.config.container):this.config.container}render(){this.renderer.init(this.container),this.element=this.renderer.render(this.stateManager.getState()),this.eventHandler.init(this.element),this.updateCalendar()}updateCalendar(){this.renderer.updateCalendar(this.stateManager.getState()),this.eventHandler&&this.eventHandler.attachDayClickHandlers()}validateSelection(){const e=this.validator.validateSelection(this.stateManager.get("startDate"),this.stateManager.get("endDate"),this.stateManager.get("availability"));return e.isValid?!0:(this.stateManager.setError(e.error),!1)}closeCalendar(){if(this.container){const e=new CustomEvent("bhc-calendar-closed",{detail:{startDate:this.state.startDate,endDate:this.state.endDate,nights:this.state.startDate&&this.state.endDate?D(this.state.startDate,this.state.endDate):0}});this.container.dispatchEvent(e)}}openCalendar(){this.element&&(this.element.style.display="block")}async loadAvailability(){const e=this.stateManager.get("currentMonth"),t=new Date(e.getFullYear(),e.getMonth(),1),a=new Date(e.getFullYear(),e.getMonth()+2,0);this.stateManager.setLoading(!0);try{const i=await this.apiService.loadAvailability(t,a);this.stateManager.setAvailability(i)}catch(i){this.handleError(i)}finally{this.stateManager.setLoading(!1)}}async handleRefreshData(){const e=this.stateManager.get("currentMonth"),t=new Date(e.getFullYear(),e.getMonth(),1),a=new Date(e.getFullYear(),e.getMonth()+2,0);this.stateManager.setLoading(!0);try{const i=await this.apiService.forceRefreshAvailability(t,a);this.stateManager.setAvailability(i)}catch(i){console.error("❌ Refresh Error:",i),this.handleError(i)}finally{this.stateManager.setLoading(!1)}}handleError(e){let t=s(this.config.locale,"errorLoadingAvailability");e.message&&(e.message.includes("HTTP")?t=s(this.config.locale,"errorLoadingAvailability"):e.message.includes("unavailable")?t=s(this.config.locale,"invalidSelectionMessage"):t=e.message),this.stateManager.setError(t)}destroy(){this.renderer&&this.renderer.destroy(),this.eventHandler&&this.eventHandler.destroy(),this.stateManager&&this.stateManager.destroy(),this.element=null}}return window.BHC={createCalendar:l=>new C(l)},C}();
